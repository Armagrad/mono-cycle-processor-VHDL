library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity testbench_ual is
end entity testbench_ual;

architecture behavior of testbench_ual is
    component ual is
        port (
            op : in std_logic_vector(1 downto 0);
            a, b : in std_logic_vector(31 downto 0);
            s : out std_logic_vector(31 downto 0);
            n : out std_logic
        );
    end component;

    signal op : std_logic_vector(1 downto 0) := (others => '0');
    signal a, b : std_logic_vector(31 downto 0) := (others => '0');
    signal s : std_logic_vector(31 downto 0);
    signal n : std_logic;
begin
    uut : ual port map (
        op => op,
        a => a,
        b => b,
        s => s,
        n => n
    );

    process
    begin
	report "TESTING UAL ENTITY..." severity note;
        -- Test case 1 : ADD
        op <= "00";
        a <= x"00000001";
        b <= x"00000001";
        wait for 10 ns;
        assert s = x"00000002" and n = '0' report "Test case 1 [ADD] failed" severity error;
        
        -- Test case 2 : SUB
        op <= "10";
        a <= x"00000001";
        b <= x"00000002";
        wait for 10 ns;
        assert s = x"ffffffff" and n = '1' report "Test case 2 [SUB] failed" severity error;

        -- Test case 3 : B COPY
        op <= "01";
        a <= x"00000001";
        b <= x"00000002";
        wait for 10 ns;
        assert s = x"00000002" and n = '0' report "Test case 3 [B COPY] failed" severity error;

        -- Test case 4 : A COPY
        op <= "11";
        a <= x"00000001";
        b <= x"00000002";
        wait for 10 ns;
        assert s = x"00000001" and n = '0' report "Test case 4 [A COPY] failed" severity error;

        -- Test case 5 : A COPY NEGATIVE
        op <= "11";
        a <= x"fffffffd";
        b <= x"00000002";
        wait for 10 ns;
        assert s = x"fffffffd" and n = '1' report "Test case 5 [A COPY NEGATIVE] failed" severity error;

        -- Test case 6 : B COPY NEGATIVE
        op <= "01";
        a <= x"00000002";
        b <= x"fffffffd";
        wait for 10 ns;
        assert s = x"fffffffd" and n = '1' report "Test case 6 [B COPY NEGATIVE] failed" severity error;


	-- Test case 7 : SUB positive from negative number
	op <= "10";
	a <= x"00000001";
	b <= x"fffffffc";
	wait for 10 ns;
	assert s = x"00000003" and n = '0' report "Test case 7 [SUB negative from positive] failed" severity error;


        -- Test case 8 : ADD negative number to negative number
        op <= "00";
        a <= x"fffffffc";
        b <= x"fffffffe";
        wait for 10 ns;
        assert s = x"fffffffa" and n = '1' report "Test case 8 [ADD negative to negative] failed" severity error;

        -- Test case 9 : SUB negative number from positive number
        op <= "10";
        a <= x"00000001";
        b <= x"fffffffe";
        wait for 10 ns;
        assert s = x"00000003" and n = '0' report "Test case 9 [SUB negative from positive] failed" severity error;

        -- Test case 10 : SUB positive number from negative number
        op <= "10";
        a <= x"fffffffe";
        b <= x"00000001";
        wait for 10 ns;
        assert s = x"fffffffd" and n = '1' report "Test case 10 [SUB positive from negative] failed" severity error;

        -- Test case 11 : ADD largest positive number with itself
        op <= "00";
        a <= x"7fffffff";
        b <= x"7fffffff";
        wait for 10 ns;
        assert s = x"fffffffe" and n = '1' report "Test case 11 [ADD largest positive with itself] failed" severity error;

        -- Test case 12 : ADD smallest negative number with itself
        op <= "00";
        a <= x"80000000";
        b <= x"80000000";
        wait for 10 ns;
        assert s = x"00000000" and n = '0' report "Test case 12 [ADD smallest negative with itself] failed" severity error;

        -- Test case 13 : SUB largest positive number from itself
        op <= "10";
        a <= x"7fffffff";
        b <= x"7fffffff";
        wait for 10 ns;
        assert s = x"00000000" and n = '0' report "Test case 13 [SUB largest positive from itself] failed" severity error;

        -- Test case 14 : SUB smallest negative number from itself
        op <= "10";
        a <= x"80000000";
        b <= x"80000000";
        wait for 10 ns;
        assert s = x"00000000" and n = '0' report "Test case 14 [SUB smallest negative from itself] failed" severity error;

        -- Test case 15 : A = 0, B = 0
        op <= "00";
        a <= x"00000000";
        b <= x"00000000";
        wait for 10 ns;
        assert s = x"00000000" and n = '0' report "Test case 15 [A = 0, B = 0] failed" severity error;

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity test_bench is
end entity;

architecture sim of test_bench is

    -- Component Declaration for Register File
    component banc_registres is
        port (
            clk: in std_logic;
            w: in std_logic_vector(31 downto 0);
            ra, rb, rw: in std_logic_vector(3 downto 0);
            we: in std_logic;
            a, b: out std_logic_vector(31 downto 0)
        );
    end component;

    -- Input and Output Signals
    signal clk: std_logic := '0';
    signal w: std_logic_vector(31 downto 0) := x"00000001";
    signal ra, rb, rw: std_logic_vector(3 downto 0) := "0000";
    signal we: std_logic := '0';
    signal a, b: std_logic_vector(31 downto 0);

begin

    -- Instantiate Register File
    reg_file : banc_registres port map (
        clk => clk,
        w => w,
        ra => ra,
        rb => rb,
        rw => rw,
        we => we,
        a => a,
        b => b
    );

    -- Clock Process
    process
    begin
        clk <= '0';
        wait for 10 ns;
        clk <= '1';
        wait for 10 ns;
    end process;

    -- Test Case 1 : Write to register, read back, compare
    we <= '1';
    rw <= "0001";
    w <= x"00000002";
    wait for 10 ns;
    we <= '0';
    ra <= "0001";
    rb <= "0000";
    wait for 10 ns;
    assert a = x"00000002" and b = x"00000000" report "Test case 1 failed" severity error;

    -- Test Case 2 : Write to register, read back, compare
    we <= '1';
    rw <= "1001";
    w <= x"ffffffff";
    wait for 10 ns;
    we <= '0';
    ra <= "1001";
    rb <= "0000";
    wait for 10 ns;
    assert a = x"ffffffff" and b = x"00000000" report "Test case 2 failed" severity error;

    -- Test case 3 : Writing to a register
    we <= '1';
    rw <= "0000";
    w <= x"12345678";
    wait for 10 ns;
    we <= '0';
    wait for 10 ns;
    assert a = x"00000000" and b = x"00000030" report "Test case 3 failed" severity error;

    -- Test case 4 : Reading from a register
    ra <= "1111";
    rb <= "1110";
    wait for 10 ns;
    assert a = x"00000030" and b = x"12345678" report "Test case 4 failed" severity error;

    -- Test case 5 : Writing to another register
    we <= '1';
    rw <= "0001";
    w <= x"fedcba98";


	
